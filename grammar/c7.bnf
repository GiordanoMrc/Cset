# The syntax of C7 in Backus-Naur Form based on C-Minus Bnf

<program> ::= <declaration-list>

<declaration-list> ::= <declaration> <declaration-list> 
                     | <declaration>

<declaration> ::= <function-definition>
                | <var-declaration>

<var-declaration> ::= <type> <id> ";"

<function-definition> ::= <type> <id> "(" {<parameter-list>}? ")" <compound-statement>

<type> ::= int
         | float
         | set 
         | elem

<parameter-list> ::= <parameter-declaration>
                   | <parameter-list> "," <parameter-declaration>

<parameter-declaration> ::= <type> <id>

<compound-statement> ::= "{" {<var-declaration>}* {<statement>}* "}"

<statement> ::= <expression-statement>
              | <compound-statement>
              | <if-statement>
              | <for-statement>
              | <return-statement>
              | <io-statement>
              | <set-statement>

<expression-statement> ::= <expression> ";" 
                         | ";"

<if-statement> ::= if "(" <expression> ")" <statement>
                 | if "(" <expression> ")" <statement> "else" <statement>

<for-statement> ::= for "(" {<expression>}? ";" {<expression>}? ";" {<expression>}? ")" <statement>

<return-statement> ::= return {<expression>}? ";"

<io-statement> ::= read "(" <id> ")" ";"
                 | write "(" <id> ")" ";"
                 | writeln "(" <id> ")" ";"
                 | <io-statement> <io-statement>

<set-statement> ::= <set-expression> 

<forall-statement> ::= forall "(" <in-expression>  ")" <statement>

<is_set-statement> ::=is_set "(" <id> ")" ";"


<expression> ::= <id> "=" <expression> 
               | <basic-expression>

<set-expression> ::=  "{" <element-list> "}" 
                   | <set-operation>

<element-list> ::= <element-list> "," elem 
                 | elem

<elem> ::= <id> 
         | <integer-constant> 
         | <float-constant>
         | "{" <element-list> "}" 

<set-operation> ::= add "("<in-expression>")"
                  | remove"("<in-expression>")"
                  | exists "("<in-expression>")"

<in-expression> ::= <basic-expression> in <expression>

<basic-expression> ::= <add-expression> 
                     | <add-expression> <relop> <add-expression>

<relop> ::= "<=" 
          | "<" 
          | ">"
          | ">="
          | "=="
          | "!="

<add-expression> ::= <term>
                   | <term> <addop> <term>
<addop> ::= "+"
          | "-"

<term> ::= <factor>
         | <term> <mulop> <factor>

<mulop> ::= "*"
          | "/"

<factor> ::= "(" <expression> ")" 
           | <id> 
           | <constant>

<constant> ::= <integer-constant>
             | <float-constant>
             | <empty-constant>

<id> ::= [a-zA-Z_][_a-z0-9A-Z]*

<integer-constant> ::= <digit> {<digit>}*

<float-constant> ::= <digit> "." {<digit>}+

<digit> ::= [0-9]

<empty-constant> ::= "EMPTY"