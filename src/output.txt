INT
var-declaration -> type ID
var-definition ->declaration-list -> declaration
ELEM
var-declaration -> type ID
var-definition ->declaration-list -> declaration-list declaration 
SET
var-declaration -> type ID
var-definition ->declaration-list -> declaration-list declaration 
SET
var-declaration -> type ID
var-definition ->declaration-list -> declaration-list declaration 
INT
INT
parameter-declaration -> type ID
parameter-list -> parameter-declaration
FLOAT
parameter-declaration -> type ID
parameter-list -> parameter-list ',' parameter-declaration
parameters -> parameter-list
INT
var-declaration -> type ID
stmt -> var-declINT
var-declaration -> type ID
stmt -> var-declstmts -> stmts stmtINT
var-declaration -> type ID
stmt -> var-declstmts -> stmts stmt constant -> INTEGER_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt constant -> STRING
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
io-stmt -> write ( exp ) 
stmt -> io-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 factor -> ID
 term -> factor
 add-exp -> term add-op term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt constant -> INTEGER_CONST
 factor -> constant
 term -> factor
 factor -> ID
 term -> factor
 factor -> ID
 term -> factor
 constant -> INTEGER_CONST
 factor -> constant
 term -> term mul-op factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ( expression )
 term -> term mul-op factor
 add-exp -> term add-op term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmtlocal-stmts -> stmts
C-stmt -> '{' var-decls local-stmts'}'
function-definition -> type ID '(' parameter-list ')'
declaration -> function-definition
declaration-list -> declaration-list declaration 
SET
SET
parameter-declaration -> type ID
parameter-list -> parameter-declaration
INT
parameter-declaration -> type ID
parameter-list -> parameter-list ',' parameter-declaration
INT
parameter-declaration -> type ID
parameter-list -> parameter-list ',' parameter-declaration
SET
parameter-declaration -> type ID
parameter-list -> parameter-list ',' parameter-declaration
parameters -> parameter-list
 factor -> ID
 term -> factor
 add-exp -> term
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp rel-op add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
return-stmt -> return exp ;
stmt -> return-stmt
 factor -> ID
 term -> factor
 add-exp -> term
 constant -> EMPTY_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp rel-op add-exp
expression-> assign 
 constant -> EMPTY_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
return-stmt -> return exp ;
stmt -> return-stmt
INT
var-declaration -> type ID
stmt -> var-declSET
var-declaration -> type ID
stmt -> var-declstmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> ADD (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ( expression )
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> REMOVE (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression -> exp , assign
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression -> exp , assign
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression -> exp , assign
 args -> arg-list
 call -> ID (args)
factor -> call
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
return-stmt -> return exp ;
stmt -> return-stmt
stmt -> if-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> ADD (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression -> exp , assign
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression -> exp , assign
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression -> exp , assign
 args -> arg-list
 call -> ID (args)
factor -> call
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
return-stmt -> return exp ;
stmt -> return-stmt
stmt -> if-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> ADD (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> REMOVE (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt constant -> EMPTY_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
return-stmt -> return exp ;
stmt -> return-stmt
stmts -> stmts stmtlocal-stmts -> stmts
C-stmt -> '{' var-decls local-stmts'}'
stmt -> cp-stmt
stmt -> if-stmt
stmt -> if-stmt
local-stmts -> stmts
C-stmt -> '{' var-decls local-stmts'}'
function-definition -> type ID '(' parameter-list ')'
declaration -> function-definition
declaration-list -> declaration-list declaration 
SET
SET
parameter-declaration -> type ID
parameter-list -> parameter-declaration
parameters -> parameter-list
 constant -> INTEGER_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 constant -> INTEGER_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> ADD (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> ADD (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
return-stmt -> return exp ;
stmt -> return-stmt
local-stmts -> stmts
C-stmt -> '{' var-decls local-stmts'}'
function-definition -> type ID '(' parameter-list ')'
declaration -> function-definition
declaration-list -> declaration-list declaration 
SET
SET
parameter-declaration -> type ID
parameter-list -> parameter-declaration
parameters -> parameter-list
 constant -> FLOAT_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 constant -> FLOAT_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> ADD (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> ADD (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
return-stmt -> return exp ;
stmt -> return-stmt
local-stmts -> stmts
C-stmt -> '{' var-decls local-stmts'}'
function-definition -> type ID '(' parameter-list ')'
declaration -> function-definition
declaration-list -> declaration-list declaration 
SET
SET
parameter-declaration -> type ID
parameter-list -> parameter-declaration
parameters -> parameter-list
SET
var-declaration -> type ID
stmt -> var-decl constant -> EMPTY_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 args -> arg-list
 call -> ID (args)
factor -> call
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> ADD (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
return-stmt -> return exp ;
stmt -> return-stmt
stmts -> stmts stmtlocal-stmts -> stmts
C-stmt -> '{' var-decls local-stmts'}'
function-definition -> type ID '(' parameter-list ')'
declaration -> function-definition
declaration-list -> declaration-list declaration 
INT
empty
SET
var-declaration -> type ID
stmt -> var-decl constant -> EMPTY_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 args -> arg-list
 call -> ID (args)
factor -> call
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmtELEM
var-declaration -> type ID
stmt -> var-declstmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> EXISTS (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 args -> arg-list
 call -> ID (args)
factor -> call
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> EXISTS (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 args -> arg-list
 call -> ID (args)
factor -> call
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmtINT
var-declaration -> type ID
stmt -> var-declstmts -> stmts stmtFLOAT
var-declaration -> type ID
stmt -> var-declstmts -> stmts stmt constant -> INTEGER_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt constant -> INTEGER_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmtELEM
var-declaration -> type ID
stmt -> var-declstmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 factor -> ID
 term -> factor
 add-exp -> term add-op term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
 factor -> ID
 term -> factor
 factor -> ID
 term -> factor
 add-exp -> term add-op term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmtlocal-stmts -> stmts
C-stmt -> '{' var-decls local-stmts'}'
 set-op -> FORALL (in-exp)
stmt -> forallstmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> IS_SET (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 factor -> ID
 term -> factor
 add-exp -> term add-op term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
 factor -> ID
 term -> factor
 factor -> ID
 term -> factor
 add-exp -> term add-op term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmtlocal-stmts -> stmts
C-stmt -> '{' var-decls local-stmts'}'
stmt -> cp-stmt
stmt -> if-stmt
local-stmts -> stmts
C-stmt -> '{' var-decls local-stmts'}'
 set-op -> FORALL (in-exp)
stmt -> forallstmts -> stmts stmt constant -> INTEGER_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
return-stmt -> return exp ;
stmt -> return-stmt
stmts -> stmts stmtlocal-stmts -> stmts
C-stmt -> '{' var-decls local-stmts'}'
function-definition -> type ID '(' parameter-list ')'
declaration -> function-definition
declaration-list -> declaration-list declaration 
SET
SET
parameter-declaration -> type ID
parameter-list -> parameter-declaration
parameters -> parameter-list
SET
var-declaration -> type ID
stmt -> var-decl constant -> EMPTY_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> ADD (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> forallstmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
return-stmt -> return exp ;
stmt -> return-stmt
stmts -> stmts stmtlocal-stmts -> stmts
C-stmt -> '{' var-decls local-stmts'}'
function-definition -> type ID '(' parameter-list ')'
declaration -> function-definition
declaration-list -> declaration-list declaration 
SET
SET
parameter-declaration -> type ID
parameter-list -> parameter-declaration
parameters -> parameter-list
SET
var-declaration -> type ID
stmt -> var-decl factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 args -> arg-list
 call -> ID (args)
factor -> call
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 set-op -> ADD (in-exp)
 factor -> set-exp
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
return-stmt -> return exp ;
stmt -> return-stmt
stmts -> stmts stmtlocal-stmts -> stmts
C-stmt -> '{' var-decls local-stmts'}'
function-definition -> type ID '(' parameter-list ')'
declaration -> function-definition
declaration-list -> declaration-list declaration 
INT
empty
SET
var-declaration -> type ID
stmt -> var-declSET
var-declaration -> type ID
stmt -> var-declstmts -> stmts stmtSET
var-declaration -> type ID
stmt -> var-declstmts -> stmts stmtSET
var-declaration -> type ID
stmt -> var-declstmts -> stmts stmt constant -> EMPTY_CONST
 factor -> constant
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 args -> arg-list
 call -> ID (args)
factor -> call
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 args -> arg-list
 call -> ID (args)
factor -> call
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmt factor -> ID
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
 args -> arg-list
 call -> ID (args)
factor -> call
 term -> factor
 add-exp -> term
 basic-exp -> add-exp
expression-> assign 
expression-stmt -> expression ;
stmt -> expression-stmt
stmts -> stmts stmtlocal-stmts -> stmts
C-stmt -> '{' var-decls local-stmts'}'
function-definition -> type ID '(' parameter-list ')'
declaration -> function-definition
declaration-list -> declaration-list declaration 
program -> declaration-list
